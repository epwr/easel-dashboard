/* app.js.erb
 *
 * Author: Eric Power
 *
 * Description:
 *    This ERB file generates the javascript that runs the client side of the Easel
 *    Dashboard.
 */

/* Plan for a refactor:
 *
 *    This needs to be broken out into a few files (which could be merged into one
 *    before sending to the client). Basically, I want:
 *      - Controller: sets up state variables (eg. dashboards, comands,
 *        websocket), builds the websocket and initiates getting historical
 *        dashboard data.
 *      - Component Builder: builds components like a new
 *      - Messaging: functions that are used to send and receive messages via
 *        the WebSocket.
 *      - Chart: functions that build and update the various Chart JS elements
 *        in dashboards. Some ideological overlap with Component Builder, so need
 *        a better taxonomy.
 *
 *    TODO: I want a 'plug and play' way to add in new element types. How this
 *    works needs to be designed. Basically, I need to drop in code on the client
 *    side that goes from knowing the type (eg. 'time-series') to building the
 *    canvas element, and handles updating it. I don't want to have to edit the
 *    html.erb stuff to set up the canvas specifically.
 *
 *    On the server side, I might be able to get away with without anythnig if I
 *    can design the YAML structure well enough to not need it.
 */
"use strict";



// Key Variables
let ws_socket = new WebSocket("ws://" + location.hostname + ":" + location.port);
let dashboard = {
  dashboard:
}
let current_cmd = null;
let keep_pane_contents = false; // Remove default contents when you run a command.
let commands = { <% $config[:commands].each do |command| %>
  <%= command[:id] %>: {
    is_running: false,
    content: "[Click 'Run' to run the command.]",
     name: "<%= command[:name] %>" },
  <% end %>
};
let dashboards = { <% $config[:dashboards].each do |dashboard| %>
  "<%= dashboard[:id] %>": {
    name: "<%= dashboard[:name] %>",
    elements: [
      <% dashboard[:elements].each do |element| %>
        {
          name: "<%= element[:name] %>",
          type: "<%= element[:type] %>",
          canvas: document.createElement("CANVAS"),
          config: {
            type: 'line',
            data: {
              labels: [],
              datasets: [
                <% element[:data].each_with_index do |datum, index| %>
                {
                  label:  "<%= datum[:name] %>",
                  data: [],
                  borderColor: "<%= $config[:colours][:primary] %>",
                },
                <% end %>
              ]
            }
          },
          data: [
            <% element[:data].each do |datum| %>
              {
                name: "<%= datum[:name] %>",
                store: []
              },
            <% end %> <%# end data loop %>
          ]
        },
      <% end %> <%# end element loop %>
    ]
  },
  <% end %> <%# end dashboard loop %>
};

// Turn cdashboards > elements > canvases into Charts
Object.keys(dashboards).forEach( (dashboard_id) => {
  Object.keys(dashboards[dashboard_id]['elements']).forEach( (element_id) => {
    let element = dashboards[dashboard_id]['elements'][element_id];
    element['chart'] = new Chart(
        element['canvas'],
        element['config'])
  })
});


function append_time_series_data(dash_id, elem_id, data_type, new_label, new_value) {

  let chart = dashboards[dash_id]['elements'][elem_id]['chart'];
  const data = chart.data;
  if (data_type == 0) { // Add a label from the 0th data type
    data.labels.push(new_label);
  }
  data.datasets[data_type].data.push(new_value); // push another data point
  chart.update();

  console.log("Appending: " + new_value);
}

/* append_stream_content
 *
 * Adds the contents of a message (content) to the output for a given id.
 */
function append_stream_content(id, content){
  console.log("Id: " + id + ", current_cmd: " + current_cmd + ", content: " + content);
  commands[id]['content'] += content;
  update_dashboard();
}

/* toggle_run
 *
 * Sends a message to the server to stop or run the given id (dependent on its
 * state), and updates the run/stop button accordingly.
 */
function toggle_run(id){
  if (commands[id]['is_running']) { // STOP (already running)
    ws_socket.send("STOP:" + id);
    document.getElementById('cmd-' + id + '-run-icon').innerHTML = "Run";
  } else { // RUN (currently not running)
    commands[id]['content'] = "";
    ws_socket.send("RUN:" + id);
    document.getElementById('cmd-' + id + '-run-icon').innerHTML = "Stop";
    current_cmd = id;
  }
  commands[id]['is_running'] = !commands[id]['is_running'];
  update_dashboard();
}

/* load_pane
 *
 * Loads the output/dashboard associated with the id.
 */
function load_dashboard(id) {
  current_cmd = id; // TODO: update the name of this to represent that it refers to a dashboard.
  update_dashboard();
}

/* updates_pane
 *
 * Updates the contents of the pane. Typically called after a message has been
 * received that wants to put new content onto the pane.
 */
function update_dashboard() {

  let pane = document.getElementById('output-pane');
  let pane_state = document.getElementById('interface-state');
  let pane_state_details = document.getElementById('interface-state-details');


  if (Number.isInteger(current_cmd)){
    if (commands[current_cmd]['is_running']) {
      pane_state.innerHTML = "Running: ";
    } else {
      pane_state.innerHTML = "Output Of: ";
    }
    pane_state_details.innerHTML = commands[current_cmd]['name'];
    pane.innerHTML = commands[current_cmd]['content'];
  } else { // is a dashboard
    pane_state.innerHTML = dashboards[current_cmd]['name'];
    pane_state_details.innerHTML = dashboards[current_cmd]['desc'];
    document.getElementById('dash-elem').appendChild(
      dashboards[current_cmd]['elements'][0]['canvas']
    );
  }
}

/* show_help_message
 *
 * Displays the help message on the pane. Called when the user clicks the 'help'
 * button.
 */
function show_help_message() {
  current_cmd = null;
  let pane = document.getElementById('output-pane');
  let pane_state = document.getElementById('interface-state');
  let pane_state_details = document.getElementById('interface-state-details');
  pane.innerHTML =
    "Welcome to the CDash Dashboard! Programs are set up via a YAML file on the server.\n\n" +
    "You can run these programs by clicking 'Run' under a program's information.\n\n" +
    "Programs' output will update even if you are looking at the output of another program.\n\n" +
    "Use the 'Show' button to select which programs' output you are seeing.";
  pane_state.innerHTML = "Showing: ";
  pane_state_details = "Help Message";
}
