/* controller.js.erb
 *
 * Author: Eric Power
 *
 * Description:
 *    This ERB file generates the javascript that runs the client side of the Easel
 *    Dashboard.
 */

// Key Variables
let webSocket = new WebSocket("ws://" + location.hostname + ":" + location.port);
let graphicDashboards = {
  <% $config[:dashboards].each do |dashboard| %>
    "<%= dashboard[:id] %>": new GraphicDashboard("<%= dashboard[:name] %>", "<%= dashboard[:desc] %>", [
      <% dashboard[:elements].each do |element| %>
        {
          type: "<%= element[:type] %>",
          name: "<%= element[:name] %>",
          desc: "___________",
          dataTypes: [
            <% element[:data].each do |datum| %>
            {
              name: "<%= datum[:name] %>",
              colour: "<%= $config[:colours][:primary] %>"
            },
            <% end %>
          ]
        },
      <% end %>
    ]),
  <% end %>
}
let textDashboards = { <% $config[:commands].each do |command| %>
  "<%= command[:id] %>": new TextDashboard("Waiting:",
                                           "",
                                           "[Please run a command to see the output here.]"),
  <% end %>
};


// Handle incomming websocket messages.
/* Receive message
 *
 * Sets the WebSocket's onmessage handler to recieve the message and then process
 * it appropriately.
 */
webSocket.onmessage = (event) => {

  console.log("Received: " + event.data);

  // If msg is about a textDashboard, or a graphicDashboard.
  if (/\d/.test(event.data[0])) { // True IFF .data starts with a digit (textDashboard ID)

    // Split message into [ID, CMD, MSG]
    let msg_frags = event.data.split(":");
    let id = msg_frags[0];
    let cmd_type = msg_frags[1];
    let msg = msg_frags.slice(2).join(":");
    // Validate
    if (!(id in textDashboards) ) {
      console.log("Error validating message: " + event.data);
      return;
    }
    // Process message
    let tDash = textDashboards[id];
    switch (cmd_type) {
      case "ERR":
        tDash.appendContent( "<span class=\"stderr\">" + msg + "</span>");
        break;
      case "OUT":
        tDash.appendContent(msg);
        break;
      case "CLEAR":
        tDash.clearContent();
        break;
      case "FINISHED":
        tDash.setIsRunning(false);
        break;
      default:
        console.log("Error: Message not understood. Id: " + id + ", cmd_type: " + cmd_type + ", msg:" + msg);
    }

  } else { // .data start with a non-digit character (it's about a dashboard).

    // Split message into [DASH, ELEMENT, MSG FRAG, DATA TYPE]
    let msg_frags = event.data.split(":");
    let dash_id = msg_frags[0][0]; // TODO: Allow more than one character to represent the dashboard.
    let elem_id = parseInt(msg_frags[0].slice(1));
    if (msg_frags[1] != "A" ) {
      console.log("Error: fragmented dashboard update received. Not implemented yet.")
      return;
    }
    let msg = msg_frags.slice(2).join(":");

    // Parse dashboard update msg
    let dataType = parseInt(msg.split("->")[0]);
    msg = msg.split("->")[1];
    let label = msg.split('"')[1];
    let value = parseFloat(msg.split('"')[3]);

    // Update Chart
    let gDash = graphicDashboards[dash_id];
    gDash.addData(elem_id, dataType, label, value);
    console.log("Appending: " + value);
  }
}

/* toggle_run
 *
 * Sends a message to the server to stop or run the given id (dependent on its
 * state), and updates the run/stop button accordingly.
 */
function toggle_run(id){

  let tDash = textDashboards[id];
  if (tDash == null) {
    console.log("Error: toggle_run called with id '" + id + "'");
    return;
  }
  if (tDash.isRunning) { // TODO: Move into the Dashboard Class.
    webSocket.send("STOP:" + id);
  } else {
    webSocket.send("RUN:" + id);
  }
  tDash.toggleRunning();
}

/* load_dashboard
 *
 * Loads the dashboard associated with the id.
 */
function load_dashboard(id) {
  let dash = graphicDashboards[id];
  if(dash == null) dash = textDashboards[id];
  dash.load();
}
